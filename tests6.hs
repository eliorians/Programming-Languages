tests =
  [ ((getLeaves (LLeaf 1)) == [1])
  , ((getLeaves (LNode 2 (LLeaf 1) (LLeaf 3))) == [1,3])
  , ((getLeaves (LNode 4 (LNode 2 (LLeaf 1) (LLeaf 3)) (LLeaf 5))) == [1,3,5])
  , ((getLeaves (LNode "node 1" (LLeaf "leaf 1") (LNode "node 2" (LLeaf "leaf 2") (LLeaf "leaf 3")))) == ["leaf 1","leaf 2","leaf 3"])
  , ((getLeaves (LNode 'a' (LNode 'b' (LNode 'c' (LLeaf 'd') (LLeaf 'e')) (LLeaf 'f')) (LNode 'g' (LLeaf 'h') (LLeaf 'i')))) == "defhi")
  , ((countNodes (LLeaf 1)) == 0)
  , ((countNodes (LNode 2 (LLeaf 1) (LLeaf 3))) == 1)
  , ((countNodes (LNode 4 (LNode 2 (LLeaf 1) (LLeaf 3)) (LLeaf 5))) == 2)
  , ((countNodes (LNode "node 1" (LLeaf "leaf 1") (LNode "node 2" (LLeaf "leaf 2") (LLeaf "leaf 3")))) == 2)
  , ((countNodes (LNode 'a' (LNode 'b' (LNode 'c' (LLeaf 'd') (LLeaf 'e')) (LLeaf 'f')) (LNode 'g' (LLeaf 'h') (LLeaf 'i')))) == 4)
  , ((sumTree (LLeaf 1)) == 1)
  , ((sumTree (LNode 1 (LLeaf 2) (LLeaf 3))) == 6)
  , ((sumTree (LNode 1 (LLeaf 2) (LNode 3 (LLeaf 4) (LNode 5 (LLeaf 6) (LLeaf 7))))) == 28)
  , ((sumTree (LNode 1 (LNode 2 (LNode 3 (LLeaf 4) (LLeaf 5)) (LLeaf 6)) (LNode 7 (LLeaf 8) (LLeaf 9)))) == 45)
  , ((sumTree (LNode 10 (LNode 15 (LLeaf 20) (LNode 25 (LLeaf 5) (LLeaf 30))) (LNode 35 (LLeaf 40) (LLeaf 45)))) == 225)
  , ((occursInLeaves even (LLeaf 8)) == True)
  , ((occursInLeaves even (LLeaf 9)) == False)
  , ((occursInLeaves (== "hello") (LNode "hello" (LLeaf "again") (LLeaf "world"))) == False)
  , ((occursInLeaves (== "hello") (LNode "world" (LLeaf "again") (LLeaf "hello"))) == True)
  , ((occursInLeaves (\s -> elem (head s) "aeiou") (LNode "foo" (LLeaf "bar") (LNode "apple" (LLeaf "baz") (LLeaf "zap")))) == False)
  , ((occursInLeaves (\s -> elem (head s) "aeiou") (LNode "foo" (LLeaf "bar") (LNode "apple" (LLeaf "baz") (LLeaf "ink")))) == True)    --fail
  , ((checkNoCover 0 (LLeaf 0)) == True)
  , ((checkNoCover 0 (LNode 0 (LLeaf 0) (LLeaf 1))) == False)
  , ((checkNoCover 0 (LNode 1 (LLeaf 0) (LNode 0 (LLeaf 0) (LLeaf 0)))) == True)
  , ((checkNoCover 'a' (LNode 'a' (LLeaf 'b') (LNode 'c' (LLeaf 'd') (LLeaf 'e')))) == False)
  , ((checkNoCover 'a' (LNode 'z' (LNode 'y' (LLeaf 'x') (LLeaf 'a')) (LNode 'b' (LLeaf 'c') (LLeaf 'a')))) == True)
  , ((getLeaves' (LLeaf 1)) == [1])
  , ((getLeaves' (LNode 2 (LLeaf 1) (LLeaf 3))) == [1,3])
  , ((getLeaves' (LNode 4 (LNode 2 (LLeaf 1) (LLeaf 3)) (LLeaf 5))) == [1,3,5])
  , ((getLeaves' (LNode "node 1" (LLeaf "leaf 1") (LNode "node 2" (LLeaf "leaf 2") (LLeaf "leaf 3")))) == ["leaf 1","leaf 2","leaf 3"])
  , ((getLeaves' (LNode 'a' (LNode 'b' (LNode 'c' (LLeaf 'd') (LLeaf 'e')) (LLeaf 'f')) (LNode 'g' (LLeaf 'h') (LLeaf 'i')))) == "defhi")
  , ((countNodes' (LLeaf 1)) == 0)
  , ((countNodes' (LNode 2 (LLeaf 1) (LLeaf 3))) == 1)
  , ((countNodes' (LNode 4 (LNode 2 (LLeaf 1) (LLeaf 3)) (LLeaf 5))) == 2)
  , ((countNodes' (LNode "node 1" (LLeaf "leaf 1") (LNode "node 2" (LLeaf "leaf 2") (LLeaf "leaf 3")))) == 2)
  , ((countNodes' (LNode 'a' (LNode 'b' (LNode 'c' (LLeaf 'd') (LLeaf 'e')) (LLeaf 'f')) (LNode 'g' (LLeaf 'h') (LLeaf 'i')))) == 4)
  , ((sumTree' (LLeaf 1)) == 1)
  , ((sumTree' (LNode 1 (LLeaf 2) (LLeaf 3))) == 6)
  , ((sumTree' (LNode 1 (LLeaf 2) (LNode 3 (LLeaf 4) (LNode 5 (LLeaf 6) (LLeaf 7))))) == 28)
  , ((sumTree' (LNode 1 (LNode 2 (LNode 3 (LLeaf 4) (LLeaf 5)) (LLeaf 6)) (LNode 7 (LLeaf 8) (LLeaf 9)))) == 45)
  , ((sumTree' (LNode 10 (LNode 15 (LLeaf 20) (LNode 25 (LLeaf 5) (LLeaf 30))) (LNode 35 (LLeaf 40) (LLeaf 45)))) == 225)
  , ((occursInLeaves' even (LLeaf 8)) == True)
  , ((occursInLeaves' even (LLeaf 9)) == False)
  , ((occursInLeaves' (== "hello") (LNode "hello" (LLeaf "again") (LLeaf "world"))) == False)-- fail
  , ((occursInLeaves' (== "hello") (LNode "world" (LLeaf "again") (LLeaf "hello"))) == True)
  , ((occursInLeaves' (\s -> elem (head s) "aeiou") (LNode "foo" (LLeaf "bar") (LNode "apple" (LLeaf "baz") (LLeaf "zap")))) == False)  --fail
  , ((occursInLeaves' (\s -> elem (head s) "aeiou") (LNode "foo" (LLeaf "bar") (LNode "apple" (LLeaf "baz") (LLeaf "ink")))) == True)
  , ((checkNoCover' 0 (LLeaf 0)) == True)
  , ((checkNoCover' 0 (LNode 0 (LLeaf 0) (LLeaf 1))) == False)
  , ((checkNoCover' 0 (LNode 1 (LLeaf 0) (LNode 0 (LLeaf 0) (LLeaf 0)))) == True)
  , ((checkNoCover' 'a' (LNode 'a' (LLeaf 'b') (LNode 'c' (LLeaf 'd') (LLeaf 'e')))) == False)
  , ((checkNoCover' 'a' (LNode 'z' (LNode 'y' (LLeaf 'x') (LLeaf 'a')) (LNode 'b' (LLeaf 'c') (LLeaf 'a')))) == True)
  ]

main = putStrLn $ show (length (filter id tests)) ++ '/' : show (length tests)
getErrors = map fst . filter (not . snd) . zip [1..] $ tests